{"version":3,"sources":["","../../src/time_objects.js"],"names":[],"mappings":"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","file":"D:/SS_Projects/angular-watchmaking/out/src/time_objects.js","sourcesContent":[null,"/**\r\n * Represents a timer that counts the time from its creation.\r\n * @param {number} counter - represents the time from the timer's creation.\r\n * (note: is @param still a JSDoc standard for ECMAScript 6 classes?)\r\n * @param {number} speed - represents the interval at which to run the tick() function (in ms)\r\n * @param {object} startTime - the time at which the coundown has started\r\n * @param {object} ticker - the counter function's timeout handle\r\n */\r\n\r\nclass Stopwatch {\r\n    constructor(speed) {\r\n        this.counter = 0;\r\n        this.speed = speed;\r\n    }\r\n\r\n    /**\r\n     * The main counter function.\r\n     * Uses a self-adjusting technique for precise time calculation\r\n     * @return nothing\r\n     */\r\n\r\n    tick() {\r\n        var diff = (new Date().getTime() - this.startTime) - this.counter;\r\n\r\n        this.counter += this.speed;\r\n\r\n        this.ticker = window.setTimeout(this.tick.bind(this), (this.speed - diff));\r\n    }\r\n\r\n    /**\r\n     * Function used to start the counter\r\n     * Note: setInterval isn't used as the counter function repeatedly uses setTimeout on itself\r\n     * while adjusting for possible issues caused by CPU cycles\r\n     * @return nothing\r\n     */\r\n\r\n    start() {\r\n        this.startTime = new Date().getTime();\r\n        this.ticker = window.setTimeout(this.tick.bind(this), this.speed);\r\n    }\r\n\r\n    /**\r\n     * Function used to pause the counter\r\n     * @return nothing\r\n     */\r\n\r\n    pause() {\r\n        window.clearTimeout(this.ticker);\r\n    }\r\n\r\n    /**\r\n     * Function used to unpause the counter\r\n     * @return nothing\r\n     */\r\n\r\n    unpause() {\r\n        this.ticker = window.setTimeout(this.tick.bind(this), this.speed);\r\n    }\r\n\r\n    /**\r\n     * Function used to restart the counter.\r\n     * Resets all fields with the exception of speed.\r\n     * @return nothing\r\n     */\r\n\r\n    restart() {\r\n        window.clearTimeout(this.ticker);\r\n        this.counter = 0;\r\n        this.start();\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a countdown that accepts a duration parameter and repeatedly decreases it until it reaches zero.\r\n * @param {number} counter - represents the time from the timer's creation.\r\n * (note: is @param still a JSDoc standard for ECMAScript 6 classes?)\r\n * @param {number} duration - represents the duration of the timer, used to keep info on restart\r\n * @param {number} speed - represents the interval at which to run the tick() function (in ms)\r\n * @param {object} startTime - the time at which the coundown has started\r\n * @param {object} ticker - the counter function's timeout handle\r\n * (maybe add onReachesZero parameter that accepts a function handle?)\r\n */\r\n\r\nclass Timer {\r\n    constructor(speed, duration) {\r\n        this.counter = duration;\r\n        this.speed = speed;\r\n        this.duration = duration;\r\n    }\r\n\r\n    /**\r\n     * The main counter function.\r\n     * Uses a self-adjusting technique for precise time calculation\r\n     * @return nothing\r\n     */\r\n\r\n    tick() {\r\n        if (this.counter <= 0)\r\n        {\r\n            this.counter = 0;\r\n            window.clearTimeout(this.ticker);\r\n        }\r\n        else\r\n        {\r\n            var diff = (new Date().getTime() - this.startTime) - (this.duration - this.counter);\r\n            this.counter -= this.speed;\r\n            this.ticker = window.setTimeout(this.tick.bind(this), (this.speed - diff));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function used to start the counter\r\n     * Note: setInterval isn't used as the counter function repeatedly uses setTimeout on itself\r\n     * while adjusting for possible issues caused by CPU cycles\r\n     * @return nothing\r\n     */\r\n\r\n    start() {\r\n        this.startTime = new Date().getTime();\r\n        this.ticker = window.setTimeout(this.tick.bind(this), this.speed);\r\n    }\r\n\r\n    /**\r\n     * Function used to pause the counter\r\n     * @return nothing\r\n     */\r\n\r\n    pause() {\r\n        window.clearTimeout(this.ticker);\r\n    }\r\n\r\n    /**\r\n     * Function used to unpause the counter\r\n     * @return nothing\r\n     */\r\n\r\n    unpause() {\r\n        this.ticker = window.setTimeout(this.tick.bind(this), this.speed);\r\n    }\r\n\r\n    /**\r\n     * Function used to restart the counter.\r\n     * Resets all fields with the exception of speed and duration.\r\n     * @return nothing\r\n     */\r\n\r\n    restart() {\r\n        window.clearTimeout(this.ticker);\r\n        this.counter = this.duration;\r\n        this.start();\r\n    }\r\n}\r\n\r\nvar s = new Timer(50,10000);\r\ns.start();"]}